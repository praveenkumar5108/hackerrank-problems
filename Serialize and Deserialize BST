class Codec:
    def serialize(self, root):
        if not root: return ""
        stack, out = [root], []
        while stack:
            cur = stack.pop()
            out.append(cur.val)
            for child in filter(None, [cur.right, cur.left]):
                stack += [child]
                
        return ' '.join(map(str, out))
        
    def deserialize(self, data):
        preorder = [int(i) for i in data.split()]
        def helper(down, up):
            if self.idx >= len(preorder): return None
            if not down <= preorder[self.idx] <= up: return None
            root = TreeNode(preorder[self.idx])
            self.idx += 1
            root.left = helper(down, root.val)
            root.right = helper(root.val, up)
            return root
            
        self.idx = 0
        return helper(-float("inf"), float("inf"))
